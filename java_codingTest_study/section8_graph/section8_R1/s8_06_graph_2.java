package java_codingTest_study.section8_graph.section8_R1;
//25 02 12 나의 조건추가: 재귀 & Stack(인접리스트) 둘다 풀어볼것


public class s8_06_graph_2 {


    public static void main(String[]args){
/*
이 문제를 인접 리스트로 풀기 어려운 이유는 알고리즘의 본질이 주어지지 않은 요소들의 부분집합을
구하는 것과 관련이 있기 때문입니다. 인접리스트는 주로 그래프에서 노드 간의 연결 관계를 다루는 데 사용되며,
부분집합을 구하는 접근 방식에는 적합하지 않습니다. 부분집합 문제는 요소 집합에 대해 선택하거나
선택하지 않음을 반복하여 계산하는 형태로 해결되므로, 그래프 알고리즘보다는 비트마스크, 재귀, 스택 등으로 풀리는 경우가 많습니다.

따라서 인접 리스트 방식보다는 재귀 또는 스택을 활용한 풀이가 이 문제에 더 적합합니다.
맞아요. 인접 리스트는 그래프에서 각 노드의 인접한 노드들을 저장할 때 유용한 자료구조인데,
부분집합 생성 문제는 각 원소를 선택하거나 선택하지 않는 결정 트리를 만드는 문제라서
그 특성에 맞게 재귀나 스택을 이용한 DFS(백트래킹) 방식이 훨씬 자연스럽습니다.
 */
    }
}
